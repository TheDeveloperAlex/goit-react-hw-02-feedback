{"version":3,"sources":["Components/Interface/Interface.jsx","Components/Statistics/Statistics.jsx","Components/App.jsx","index.js"],"names":["Interface","Statistics","good","neutral","bad","total","percentage","message","App","countPositiveFeedbackPercentage","setState","prev","Math","floor","state","updateStat","property","type","onClick","this","Component","ReactDOM","render","document","getElementById"],"mappings":"sPAYeA,EAZG,WACd,OACI,kCACA,mDCsBOC,EAzBI,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QAmB7D,OAhBsB,IAAVF,EACQ,oCACJ,4CACA,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,uCAAUC,EAAV,WAGa,IAAVD,EACE,6BAAKE,SADX,GCwCAC,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAYFC,gCAAkC,WAC9B,EAAKC,UAAS,SAAAC,GACd,MAAO,CAAEL,WAAaM,KAAKC,MAAyB,IAAlB,EAAKC,MAAMZ,MAAgB,EAAKY,MAAMV,IAAM,EAAKU,MAAMZ,KAAO,EAAKY,MAAMX,WAAe,OAfhH,EAmBdY,WAAa,SAACC,GACV,EAAKN,UAAS,SAAAC,GACZ,OAAO,eAAGK,EAAWL,EAAKK,GAAY,MAExC,EAAKP,mCArBP,EAAKK,MAAQ,CACbZ,KAAM,EACNC,QAAS,EACTC,IAAK,EACLE,WAAY,GANA,E,0CA2Bd,WAAU,IAAD,OACP,OACE,qCACE,cAAC,EAAD,IAEE,gCACE,wBAAQW,KAAK,SAASC,QAAS,kBAAM,EAAKH,WAAW,SAArD,kBACA,wBAAQE,KAAK,SAASC,QAAS,kBAAM,EAAKH,WAAW,YAArD,qBACA,wBAAQE,KAAK,SAASC,QAAS,kBAAM,EAAKH,WAAW,QAArD,oBAGJ,cAAC,EAAD,CAAYb,KAAMiB,KAAKL,MAAMZ,KAAMC,QAASgB,KAAKL,MAAMX,QAASC,IAAKe,KAAKL,MAAMV,IAAKC,MAAOc,KAAKL,MAAMV,IAAMe,KAAKL,MAAMZ,KAAOiB,KAAKL,MAAMX,QAASG,WAAYa,KAAKL,MAAMR,WAAaC,QAAQ,6B,GAxCrLa,aCDlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.43b1f39e.chunk.js","sourcesContent":["const Interface = () => {\r\n    return (\r\n        <section>\r\n        <h2>Leave feedback</h2>\r\n            \r\n            \r\n        </section>\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default Interface;","const Statistics = ({ good, neutral, bad, total, percentage, message }) => {\r\n    const renderContent = () => {\r\n        \r\n        if (total !== 0) {\r\n            return (<section>\r\n                <h2>Statistics</h2>\r\n                <p>good: {good}</p>\r\n                <p>neutral: {neutral}</p>\r\n                <p>bad: {bad}</p>\r\n                <p>total: {total}</p>\r\n                <p>Good: {percentage}% </p>\r\n            </section>)\r\n            \r\n        } else if (total === 0) {\r\n            return ( <h3>{message}</h3>)\r\n               \r\n            };\r\n        \r\n    }\r\nreturn (\r\n    renderContent()\r\n        \r\n    );\r\n}\r\n\r\nexport default Statistics;","import React, { Component } from 'react'\r\nimport Interface from './Interface/Interface';\r\nimport Statistics from './Statistics/Statistics';\r\nimport Notification from './Notification/Notification';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n    percentage: 0,\r\n    }\r\n  }\r\n  \r\n\r\n  \r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n      this.setState(prev => {\r\n      return { percentage: (Math.floor((this.state.good * 100)  / (this.state.bad + this.state.good + this.state.neutral) )) || 0 }\r\n    });\r\n  }\r\n\r\n  updateStat = (property) => {\r\n      this.setState(prev => {\r\n        return { [property]: prev[property] + 1 }\r\n      });\r\n      this.countPositiveFeedbackPercentage();\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Interface />\r\n        {/* <FeedbackOptions options={ } onLeaveFeedback={ } > */}\r\n          <div>\r\n            <button type=\"button\" onClick={() => this.updateStat('good')}>good</button>\r\n            <button type=\"button\" onClick={() => this.updateStat('neutral')}>neutral</button> \r\n            <button type=\"button\" onClick={() => this.updateStat('bad')}>bad</button>\r\n          </div>\r\n        {/* </FeedbackOptions> */}\r\n        <Statistics good={this.state.good} neutral={this.state.neutral} bad={this.state.bad} total={this.state.bad + this.state.good + this.state.neutral} percentage={this.state.percentage}  message='No feedback given' />\r\n      </>\r\n    )\r\n    \r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App.jsx\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}